stages:
  - nullplatform-build-create

variables:
  NULLPLATFORM_BUILD_URL: "https://ci.nullplatform.com/build"
  NULLPLATFORM_BUILD_HEADERS: "Content-Type: application/json"

nullplatform-build-create:
  stage: nullplatform-build-create
  image: ubuntu:latest
  before_script:
    - apt-get update
    - apt-get install -y openssl curl jq
    - openssl enc -d -iter 1000 -aes-256-cbc -in nullplatform_login.response.json.enc -out nullplatform_login.response.json -k "$NULLPLATFORM_ENCRIPTION_KEY"
    - ACCESS_TOKEN=$(cat nullplatform_login.response.json | jq -r '.access_token')
  script:
    - |+
      for application in $(cat nullplatform_application_metadata.json | jq -c '.[]'); do
        application_id=$(echo "$application" | jq -r '.id')
        code_repository_url=$(echo "$application" | jq -r '.code_repository.url')
        permalink="$code_repository_url/-/commit/$CI_COMMIT_SHA"
        NULLPLATFORM_BUILD_CREATE_BODY="{\"application_id\":$application_id, \"commit\":{\"id\":\"$CI_COMMIT_SHA\", \"permalink\":\"$permalink\"},\"description\":\"$CI_COMMIT_TITLE\",\"branch\":\"$CI_COMMIT_BRANCH\"}"
        NULLPLATFORM_BUILD_CREATE_RESPONSE=$(curl -X POST -H "$NULLPLATFORM_BUILD_HEADERS" -H "Authorization:Bearer $ACCESS_TOKEN" -d "$NULLPLATFORM_BUILD_CREATE_BODY" $NULLPLATFORM_BUILD_URL)
        printf "%s\n" $NULLPLATFORM_BUILD_CREATE_RESPONSE >> nullplatform-build-create.json
      done
    - cat nullplatform-build-create.json 
  artifacts:
    paths:
      - nullplatform-build-create.json
    expire_in: 30 min

